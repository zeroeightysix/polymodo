import {
    Button,
    VerticalBox,
    LineEdit,
    Palette,
    ListView,
    StandardListView,
    HorizontalBox,
} from "std-widgets.slint";
import { PolymodoTextInput } from "text-input.slint";
import {
    LauncherEntry,
    LauncherEntries,
    LauncherListView,
} from "launcher-entry.slint";
import { Separator } from "../separator.slint";
import { SettingsPopup } from "launcher-settings.slint";
import { PolyButton } from "../button.slint";

export { LauncherEntries }

export global LauncherSearch {
    callback search-edited(/*query*/ string);
}

export component LauncherWindow inherits Window {
    in property <length> font-size: 16px;
    in-out property <float> transparency: 0.2;

    callback escape-pressed();
    callback launch(id: int);
    callback transparency-changed(transparency: float);

    background: transparent;
    default-font-size: font-size;
    no-frame: true;

    title: "launcher";
    width: 450px;
    height: 581px;

    init => {
        Palette.color-scheme = ColorScheme.dark;
    }

    background := Rectangle {
        width: 100%;
        height: 100%;
        background: black.transparentize(transparency);

        border-radius: 12px;
        border-color: #333333;
        border-width: 1px;
    }

    settings_popup := SettingsPopup {
        close-policy: close-on-click-outside;

        transparency: transparency;

        transparency_changed(t) => {
            transparency = t;
            transparency-changed(t);
        }
    }

    VerticalBox {
        vertical-stretch: 1;
        spacing: 0;

        HorizontalLayout {

            search_box := PolymodoTextInput {
                vertical-stretch: 0;

                init => {
                    self.focus-input();
                }

                key-pressed(event) => {
                    if (event.text == Key.Escape) {
                        escape-pressed();
                        return accept;
                    } else if (event.text == Key.Return) {
                        let c = list_view.current-item;
                        if c >= 0 && c < LauncherEntries.entries.length {
                            launch(LauncherEntries.entries[c].id);
                        }
                        return accept;
                    } else {
                        return list_view.key-pressed(event);
                    }

                    reject
                }

                text-edited => {
                    LauncherSearch.search-edited(self.text);
                }
            }

            PolyButton {
                icon: @image-url("../assets/gear-solid-full.svg");
                min-width: 0px;

                clicked => settings_popup.show();
            }
        }

        Separator { }

        Rectangle {
            vertical-stretch: 1;

            list_view := LauncherListView {
                model: LauncherEntries.entries;
                current-item: 0;
                horizontal-scrollbar-policy: ScrollBarPolicy.always-off;

                if LauncherEntries.entries.length == 0: Text {
                    text: "No results";
                }
            }
        }
    }
}
